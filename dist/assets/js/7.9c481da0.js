(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{495:function(t,e,a){t.exports=a.p+"assets/img/52077233-196f-4201-88e0-350728b9ad0a.12302cda.png"},496:function(t,e,a){t.exports=a.p+"assets/img/20d910f5-4d44-4f5a-a07d-b2ddbbb6895b.a169550d.png"},497:function(t,e,a){t.exports=a.p+"assets/img/f133fbd0-9859-4532-8ce7-5f41c55e8cce.58bcbd54.png"},498:function(t,e,a){t.exports=a.p+"assets/img/7c060ef7-fd5f-45b0-b51d-9892e3455f29.b3961fe0.png"},499:function(t,e,a){t.exports=a.p+"assets/img/d564fc06-0586-4f8c-8954-7e592746d29b.ca10f506.png"},500:function(t,e,a){t.exports=a.p+"assets/img/845c1963-a13c-4546-885a-7edce40e632a.7c396e91.png"},501:function(t,e,a){t.exports=a.p+"assets/img/b3a4b20a-1982-4c78-b723-8fbc1e93157a.85a02a02.png"},502:function(t,e,a){t.exports=a.p+"assets/img/12d58f10-24ed-4043-b7d4-f71407b19458.6fd47673.png"},503:function(t,e,a){t.exports=a.p+"assets/img/dc3ea0a9-664c-4cfb-857e-093868c20b2c.5a52c80a.png"},504:function(t,e,a){t.exports=a.p+"assets/img/32f52ea5-3628-4116-ba7e-14c1a17a815c.3dbb7c9d.png"},505:function(t,e,a){t.exports=a.p+"assets/img/b1a875b3-f025-4281-b536-1d59078bc35e.bda9c81f.png"},506:function(t,e,a){t.exports=a.p+"assets/img/6f307f19-bea7-4810-9ca8-a24c109baf23.b66f74d6.png"},507:function(t,e,a){t.exports=a.p+"assets/img/febd836a-61a1-4b03-ae5e-7b7db2387730.5e8051d4.png"},508:function(t,e,a){t.exports=a.p+"assets/img/47b0f3bc-592d-4e1b-b6df-084d1fbccf59.beab798a.png"},509:function(t,e,a){t.exports=a.p+"assets/img/827f8edf-a152-46b4-8fb6-5d2eb018ec9d.27f6d717.png"},564:function(t,e,a){"use strict";a.r(e);var s=a(4),_=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"一、版本控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、版本控制"}},[t._v("#")]),t._v(" 一、版本控制")]),t._v(" "),s("h3",{attrs:{id:"_1、本地版本控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、本地版本控制"}},[t._v("#")]),t._v(" 1、本地版本控制")]),t._v(" "),s("p",[s("strong",[t._v("RCS:")]),t._v(" 工作原理基本上就是保存并管理文件补丁（patch）。文件补丁是一种特定格式的文本文件，记录着对应文件修订前后的内容变化。所以，根据每次修订后的补丁，rcs 可以通过不断打补丁，计算出各个版本的文件内容。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(495),alt:"52077233-196f-4201-88e0-350728b9ad0a"}})]),t._v(" "),s("h3",{attrs:{id:"_2、集中式版本控制系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、集中式版本控制系统"}},[t._v("#")]),t._v(" 2、集中式版本控制系统")]),t._v(" "),s("p",[s("strong",[t._v("CVS，Subversion")]),t._v(" 等：有一个单一的集中管理的服务器，保存所有文件的修订版本。需要协同工作的人们都是通过客户端连到这台服务器，取出最新的文件或者提交更新。")]),t._v(" "),s("p",[t._v("缺点：中央服务器的单点故障、有丢失所有历史更新记录的风险、恢复数据困难")]),t._v(" "),s("p",[s("img",{attrs:{src:a(496),alt:"20d910f5-4d44-4f5a-a07d-b2ddbbb6895b"}})]),t._v(" "),s("h3",{attrs:{id:"_3、分布式版本控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、分布式版本控制"}},[t._v("#")]),t._v(" 3、分布式版本控制")]),t._v(" "),s("p",[s("strong",[t._v("Git，Bazaar")]),t._v(" 等：客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(497),alt:"f133fbd0-9859-4532-8ce7-5f41c55e8cce"}})]),t._v(" "),s("h2",{attrs:{id:"二、初始git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、初始git"}},[t._v("#")]),t._v(" 二、初始Git")]),t._v(" "),s("h3",{attrs:{id:"_1、git的由来"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、git的由来"}},[t._v("#")]),t._v(" 1、Git的由来")]),t._v(" "),s("p",[t._v("1991－2002年：在当时Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上。")]),t._v(" "),s("p",[t._v("2002年：项目组开始启用分布式版本控制系统 BitKeeper 来管理和维护代码。2005年：BitKeeper不在免费为项目组提供服务，迫使Linux开源社区开发属于自己的版本控制系统。设计的目标包括：速度、 简单的设计、对非线性开发模式的强力支持、完全分布式、支持大规模项目的开发。")]),t._v(" "),s("h3",{attrs:{id:"_2、git的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、git的特点"}},[t._v("#")]),t._v(" 2、Git的特点")]),t._v(" "),s("ul",[s("li",[t._v("直接记录快照，不比较差异")]),t._v(" "),s("li",[t._v("近乎所有操作都在本地执行")]),t._v(" "),s("li",[t._v("保持数据都完整性")])]),t._v(" "),s("h2",{attrs:{id:"三、git的文件状态和工作状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、git的文件状态和工作状态"}},[t._v("#")]),t._v(" 三、Git的文件状态和工作状态")]),t._v(" "),s("h3",{attrs:{id:"_1、工作区域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、工作区域"}},[t._v("#")]),t._v(" 1、工作区域")]),t._v(" "),s("p",[t._v("Git本地工作区域分为三个：工作区域、暂存区域、本地仓库")]),t._v(" "),s("p",[s("img",{attrs:{src:a(498),alt:"7c060ef7-fd5f-45b0-b51d-9892e3455f29"}})]),t._v(" "),s("p",[s("strong",[t._v("本地仓库（.git目录）:")]),t._v(" 每个项目都有一个 "),s("strong",[t._v(".git")]),t._v("目录，它是 Git 用来保存元数据和对象数据库的地方，在执行 "),s("code",[t._v("git init")]),t._v(" 的时候生成 。clone仓库时实际上就是，clone此目录中的数据。")]),t._v(" "),s("p",[s("strong",[t._v("工作目录：")]),t._v(" 从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工具目录。")]),t._v(" "),s("p",[s("strong",[t._v("暂存区域：")]),t._v(" 是一个文件，放在 "),s("strong",[t._v(".git")]),t._v(" 目录中。也被称为索引文件。")]),t._v(" "),s("h3",{attrs:{id:"_2、文件状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、文件状态"}},[t._v("#")]),t._v(" 2、文件状态")]),t._v(" "),s("p",[t._v("对于任何一个文件，当他未被放入git目录之前，处于未跟踪状态（untracted）。")]),t._v(" "),s("p",[t._v("文件在Git内只有三种状态：已修改（modified）,已暂存（staged）和已提交（committed）。")]),t._v(" "),s("p",[t._v("文件在不同状态下所处于的工作区域不同，可以根据文件所处的位置来判断文件当前所处的状态。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(499),alt:"d564fc06-0586-4f8c-8954-7e592746d29b"}})]),t._v(" "),s("h3",{attrs:{id:"_3、与文件状态相关的git基本命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、与文件状态相关的git基本命令"}},[t._v("#")]),t._v(" 3、与文件状态相关的git基本命令")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("git status")]),t._v("：检查当前所有文件的状态。")]),t._v(" "),s("p",[t._v("注⚠️【参数扩展】：")]),t._v(" "),s("p",[s("code",[t._v("git status --ignored")]),t._v("：查看ignored文件的状态")]),t._v(" "),s("p",[s("code",[t._v("git status --long")]),t._v(" ：使用简洁的方式查看状态")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("git add")]),t._v(" ：将目标文件快照放入暂存区域")]),t._v(" "),s("p",[t._v("注⚠️【常用】：")]),t._v(" "),s("p",[s("code",[t._v("git add .")]),t._v("：一般是放入所有")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("git commit")]),t._v(" ：提交到本地仓库")]),t._v(" "),s("p",[t._v("注⚠️【常用】：")]),t._v(" "),s("p",[s("code",[t._v('git commit -m ""')]),t._v("：直接输入提交信息")]),t._v(" "),s("p",[t._v("注⚠️【参数扩展】：")]),t._v(" "),s("p",[s("code",[t._v("git commit -amend")]),t._v("：撤销提交到commit，重新提交")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("git reset")]),t._v(" + "),s("code",[t._v("git checkout")]),t._v("：撤销操作")]),t._v(" "),s("p",[s("img",{attrs:{src:a(500),alt:"845c1963-a13c-4546-885a-7edce40e632a"}})]),t._v(" "),s("ol",[s("li",[s("code",[t._v("git reset")]),t._v("：撤销已经暂存到文件，回到modifed状态")]),t._v(" "),s("li",[s("code",[t._v("git checkout -- <file>")]),t._v(" : 撤销对文件的修改")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("git diff")]),t._v("：查看两次提交之间的差别，反映到工作区域，即可以查看不同区域之间的差别")]),t._v(" "),s("p",[s("img",{attrs:{src:a(501),alt:"b3a4b20a-1982-4c78-b723-8fbc1e93157a"}})])])]),t._v(" "),s("h2",{attrs:{id:"四、git分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、git分支"}},[t._v("#")]),t._v(" 四、Git分支")]),t._v(" "),s("h3",{attrs:{id:"_1、commit对象在仓库中的数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、commit对象在仓库中的数据结构"}},[t._v("#")]),t._v(" 1、commit对象在仓库中的数据结构")]),t._v(" "),s("p",[t._v("git保存的是文件的快照。所以在 Git 中提交时，会保存一个提交（commit）对象。该对象包含一个指向暂存内容快照的指针，本次提交的作者信息，包含零个或多个指向该提交对象的父对象指针。")]),t._v(" "),s("p",[t._v("当使用 "),s("code",[t._v("git commit")]),t._v(" 新建一个提交对象前，Git 会先计算每一个子目录（本例中就是项目根目录）的校验和，然后在 Git 仓库中将这些目录保存为树（tree）对象。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("单个提交对象在仓库中的数据结构")]),t._v(" "),s("p",[s("img",{attrs:{src:a(502),alt:"12d58f10-24ed-4043-b7d4-f71407b19458"}})])]),t._v(" "),s("li",[s("p",[t._v("多个提交对象之间的链接关系")]),t._v(" "),s("p",[s("img",{attrs:{src:a(503),alt:"dc3ea0a9-664c-4cfb-857e-093868c20b2c"}})])])]),t._v(" "),s("h3",{attrs:{id:"_2、分支的创建、切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、分支的创建、切换"}},[t._v("#")]),t._v(" 2、分支的创建、切换")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git branch <name>")]),t._v("  来创建一个新的分支")]),t._v(" "),s("p",[t._v("那么，Git 是如何知道你当前在哪个分支上工作的呢？保存着一个名为HEAD的指针，它是一个指向你正在工作中的本地分支的指针。")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("git branch")]),t._v("命令只是创建分支，并没有切换分支。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(504),alt:"32f52ea5-3628-4116-ba7e-14c1a17a815c"}})]),t._v(" "),s("h3",{attrs:{id:"_3、分支是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、分支是什么"}},[t._v("#")]),t._v(" 3、分支是什么")]),t._v(" "),s("p",[t._v("Git 中的分支实际上仅是一个包含所指对象校验和（40 个字符长度 SHA-1 字串）的文件。")]),t._v(" "),s("p",[s("strong",[t._v("优点：")])]),t._v(" "),s("ul",[s("li",[t._v("创建和销毁一个分支开销低。相当于向一个文件中写入41个字节。")]),t._v(" "),s("li",[t._v("速度快，可以在几毫秒的时间内完成分支的创建与切换。与项目复杂度无关。")]),t._v(" "),s("li",[t._v("由于保存着祖先信息，所以合并分支的工作很容易。")])]),t._v(" "),s("h3",{attrs:{id:"_4、与远程分支的交互"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、与远程分支的交互"}},[t._v("#")]),t._v(" 4、与远程分支的交互")]),t._v(" "),s("p",[t._v("一次 Git 克隆会建立你自己的本地分支 master 和远程分支 origin/master，并且将它们都指向 "),s("code",[t._v("origin")]),t._v(" 上的 "),s("code",[t._v("master")]),t._v(" 分支。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(505),alt:"b1a875b3-f025-4281-b536-1d59078bc35e"}})]),t._v(" "),s("p",[t._v("随着开发的进行，远程分支和本地分支会朝着不同的方向发展。")]),t._v(" "),s("p",[t._v("可以使用"),s("code",[t._v("git fetch origin")]),t._v("命令来同步远程服务器上的数据到本地，同时将remote索引"),s("code",[t._v("origin/master")]),t._v("指针一到它最新的位置上。")]),t._v(" "),s("p",[s("code",[t._v("git fetch origin //origin代表远程服务器")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(506),alt:"6f307f19-bea7-4810-9ca8-a24c109baf23"}})]),t._v(" "),s("p",[t._v("这时使用"),s("code",[t._v("git merge origin/master")]),t._v("把该远程分支的内容合并到当前分支：")]),t._v(" "),s("p",[s("code",[t._v("git merge origin/master")])]),t._v(" "),s("p",[t._v("上述两个命令可以使用git pull 一条命令来完成")]),t._v(" "),s("p",[s("code",[t._v("git pull origin/master")])]),t._v(" "),s("p",[t._v("通过"),s("code",[t._v("git push")]),t._v("命令可以，将本地分支推送至远程仓库，或者删除远程分支")]),t._v(" "),s("p",[s("code",[t._v("git push origin testing:testing //将本地分支推送至远程仓库 git push origin :testing //删除远程分支")])]),t._v(" "),s("h2",{attrs:{id:"五、git操作命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、git操作命令"}},[t._v("#")]),t._v(" 五、Git操作命令")]),t._v(" "),s("h3",{attrs:{id:"_1、查看提交历史-git-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、查看提交历史-git-log"}},[t._v("#")]),t._v(" 1、查看提交历史 git log")]),t._v(" "),s("p",[s("code",[t._v("git log")]),t._v("：查看提交历史")]),t._v(" "),s("p",[t._v("注⚠️【参数扩展】：")]),t._v(" "),s("p",[s("code",[t._v("git log --graph //可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况 gitk //git log命令的可视化版本，输入命令后会启动一个界面")])]),t._v(" "),s("h3",{attrs:{id:"_2、push到远程仓库之后的撤销操作git-revert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、push到远程仓库之后的撤销操作git-revert"}},[t._v("#")]),t._v(" 2、push到远程仓库之后的撤销操作git revert")]),t._v(" "),s("p",[t._v("revert命令是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在；")]),t._v(" "),s("p",[t._v("而"),s("strong",[t._v("reset")]),t._v("是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。")]),t._v(" "),s("p",[t._v("git revert 可以用于回滚远程仓库")]),t._v(" "),s("h3",{attrs:{id:"_3、储存命令-git-stash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、储存命令-git-stash"}},[t._v("#")]),t._v(" 3、储存命令 git stash")]),t._v(" "),s("p",[t._v("开发过程中会遇到这样的情景，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。可以使用git stash命令来储藏当前的工作状态。")]),t._v(" "),s("p",[t._v("储藏可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。")]),t._v(" "),s("h3",{attrs:{id:"_4、git-merge-和-git-rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、git-merge-和-git-rebase"}},[t._v("#")]),t._v(" 4、git merge 和 git rebase")]),t._v(" "),s("p",[s("strong",[t._v("git merge：")]),t._v(' 你可以用"pull"命令把"origin"分支上的修改拉下来并且和你的修改合并，产生一个新的commit，git提交历史如下。')]),t._v(" "),s("p",[s("img",{attrs:{src:a(507),alt:"febd836a-61a1-4b03-ae5e-7b7db2387730"}})]),t._v(" "),s("p",[s("strong",[t._v("git rebase")]),t._v('：命令会把你的"mywork"分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到".git/rebase"目录中),然后把"mywork"分支更新 到最新的"origin"分支，最后把保存的这些补丁应用到"mywork"分支上，改写了“mywork”分支的提交历史。')]),t._v(" "),s("p",[s("img",{attrs:{src:a(508),alt:"47b0f3bc-592d-4e1b-b6df-084d1fbccf59"}})]),t._v(" "),s("h2",{attrs:{id:"六、公司分支管理规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、公司分支管理规范"}},[t._v("#")]),t._v(" 六、公司分支管理规范")]),t._v(" "),s("blockquote",[s("p",[t._v("在美团实习的时候，组里面使用git的一些地方还有点不是很规范，并且也存在一些问题，于是乎mentor让我整理一下业内的分支管理规范供参考。")])]),t._v(" "),s("h3",{attrs:{id:"_1、主要分支-生命周期长-都存在中心库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、主要分支-生命周期长-都存在中心库"}},[t._v("#")]),t._v(" 1、主要分支：生命周期长，都存在中心库")]),t._v(" "),s("ul",[s("li",[t._v("master分支：线上发布分支，每次上线前都要创建Tag；")]),t._v(" "),s("li",[t._v("develop分支：开发主干分支，新feature时从develop分支创建新的feature分支，新feature开发自测完成后合并到develop分支。可用于集成来自针对master分支的hotfix。")])]),t._v(" "),s("h3",{attrs:{id:"_2、辅助分支-生命周期十分有限-完成使命后即可被清除。-一般存在开发者那里"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、辅助分支-生命周期十分有限-完成使命后即可被清除。-一般存在开发者那里"}},[t._v("#")]),t._v(" 2、辅助分支："),s("strong",[t._v("生命周期十分有限，完成使命后即可被清除。（一般存在开发者那里）")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("feature分支：起源于develop分支，最终也会归于develop分支，通常命名为feature-*。每个大的feature从develop分支建立单独的feature分支，开发测试完成后合并到develop分支，并将feature分支删除。")])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("常用于开发一个独立的新功能，且其最终的结局必然只有两个，其一是合并入develop分支，其二是被抛弃。")]),t._v(" "),s("li",[t._v("最典型的Feature分支一定是存在于团队开发者那里，而不应该是“中心版本库”中。")])])]),t._v(" "),s("li",[s("p",[t._v("release分支(可选)：起源于develop分支，最终归于develop或master分支，通常命名为release-XX。")]),t._v(" "),s("ul",[s("li",[t._v("Release分支通常负责“短期的发布前准备工作”、“小bug的修复工作”、“版本号等元信息的准备工作”。与此同时，develop分支又可以承接下一个新功能的开发工作了。")]),t._v(" "),s("li",[t._v("Release分支产生新提交的最好时机是develop分支已经基本到达预期的状态，至少希望新功能已经完全从feature分支合并到develop分支了。")]),t._v(" "),s("li",[t._v("在一段短时间内，在release分支上，我们可以继续修复bug。在此阶段，严禁新功能的并入，新功能应该是被合并到develop分支的。经过若干bug修复后，release分支上的代码已经达到可发布状态，此时，需要完成三个动作：第一是将release 分支合并到master分支，第二是一定要为master上的这个新提交打TAG（记录里程碑），第三是要将release分支合并回develop分支。")]),t._v(" "),s("li",[t._v("团队规模不大时，可不启用release分支。")])])]),t._v(" "),s("li",[s("p",[t._v("hotfix分支：用于运维及线上问题修复。源于master，归于develop或master，通常命名为hotfix-*。")]),t._v(" "),s("ul",[s("li",[t._v("当线上出现bug需要修复时, 从master分支创建hotfix分支。")]),t._v(" "),s("li",[t._v("设立hotfix分支的原因是，希望避免“develop分支”新功能的开发必须为BUG修复让路的情况。")]),t._v(" "),s("li",[t._v("BUG修复后，需要将hotfix分支合并回master分支，同时也需要合并回develop分支。并将此hotfix分支删除")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(509),alt:"827f8edf-a152-46b4-8fb6-5d2eb018ec9d"}})]),t._v(" "),s("h2",{attrs:{id:"忽略文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[t._v("#")]),t._v(" 忽略文件")]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此行为注释 会被Git忽略")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 node_modules/ 目录下所有的文件")]),t._v("\nnode_modules\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略所有.vscode结尾的文件")]),t._v("\n.vscode\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略所有.md结尾的文件")]),t._v("\n*.md\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 但README.md 除外")]),t._v("\n!README.md\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会忽略 doc/something.txt 但不会忽略doc/images/arch.txt")]),t._v("\ndoc/*.txt\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 doc/ 目录下所有扩展名为txt文件")]),t._v("\n\ndoc/**/*.txt\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])])])}),[],!1,null,null,null);e.default=_.exports}}]);